{"version":3,"sources":["views/newScore/NewScoreView.module.css","views/home/HomeView.module.css","views/game/GameView.module.css","components/background/BackgroundAnimationLines.module.css","components/selectors/language/LanguageSelector.module.css","components/button/rounded/RoundedButton.module.css","views/ranking/RankingView.module.css","components/button/home/HomeButton.module.css","components/spinners/RotationSpinner.module.css","style/MainStyles.module.css","components/grid/GridEntry.module.css","actions/currentGame/currentGameConstants.js","actions/currentGame/currentGameUtil.js","reducers/currentGame/currentGameReducer.js","reducers/ranking/rankingReducer.js","reducers/screen/screenReducer.js","reducers/rootReducer.js","actions/currentGame/currentGameActionsTypes.js","actions/ranking/rankingActionsTypes.js","actions/ranking/rankingConstants.js","actions/screen/screenActionsTypes.js","store/configureStore.js","components/background/BackgroundAnimationLines.js","util/StyleUtil.js","components/button/home/HomeButton.js","actions/currentGame/currentGameActionsCreators.js","routing/routes.js","components/button/rounded/RoundedButton.js","icons/flags/SpainFlagIcon.js","icons/flags/FranceFlagIcon.js","icons/flags/UnitedKingdomFlagIcon.js","components/selectors/language/LanguageSelector.js","intl/LanguagesCodes.js","views/home/HomeView.js","icons/CircleIcon.js","icons/CrossIcon.js","components/grid/GridEntry.js","components/spinners/RotationSpinner.js","views/game/GameView.js","views/game/GameViewStyleUtils.js","views/newScore/NewScoreView.js","views/ranking/RankingView.js","routing/routing.js","managers/ResizeManager.js","actions/screen/screenActionsCreators.js","actions/screen/screenConstants.js","intl/IntlManager.js","App.js","index.js"],"names":["module","exports","SCORE","WINNER","GRID_KEYS","Array","from","length","v","k","WIN_COMBINATIONS","hasWinnerCombination","ids","size","reduce","currentWinnerCombination","every","id","includes","initialState","Immutable","fromJS","getScore","state","get","getGridEntryContent","getIn","getRandomAvailableGridEntryId","availableGridEntriesIds","filter","getAvailableGridEntriesIds","Math","floor","random","getGridEntriesFilterByWhoSelected","selectedByUserType","accum","value","key","push","List","isWinner","userType","getWinner","isGameFinished","entry","getFilledGridEntriesMap","Map","combineReducers","action","type","set","payload","update","score","setIn","name","gamerIndex","findIndex","game","sortBy","scoreEntry","intlReducer","canUserSelect","currentGameSelectors","enhancer","composeEnhancers","compose","applyMiddleware","reduxThunk","createStore","rootReducer","React","memo","className","styles","main","line","mergeClasses","args","join","HomeButton","label","to","onClick","propTypes","PropTypes","string","func","startGame","createAction","getSelectGridEntryAction","selectedByUser","selectGridEntry","dispatch","getState","checkIfSomeoneWins","machineRandomSelectedId","setTimeout","winner","window","location","hash","setWinner","RoundedButton","Icon","icon","elementType","SpainFlagIcon","viewBox","style","fill","d","FranceFlagIcon","cx","cy","r","UnitedKingdomFlagIcon","LanguageSelector","useDispatch","onEnglishSelected","useCallback","updateIntl","locale","messages","enUK","onSpanishSelected","esES","onFrenchSelected","frFR","button","defineMessages","title","defaultMessage","start","HomeView","intl","useIntl","onStartButtonClicked","BackgroundAnimationLines","titleArea","formatMessage","buttonsArea","languageSelector","CircleIcon","CrossIcon","GridEntry","sizeInPx","gridEntryContent","useSelector","borderWidth","innerSize","mainInlineStyles","width","height","mainClassNames","gridEntryIsSelectable","selectable","selectedByMachine","icon_selectedByUser","icon_selectedByMachine","icon_enabled","icon_forOverState","icon_disabled","RotationSpinner","GameView","windowWidth","screenSelectors","windowHeight","gridSizeInPx","windowSmallerSizeInPx","min","gridEntrySizeInPx","gridBorderWidth","ceil","gridEntryInlineStyles","gridSize","gridInlineStyles","getGameViewStyles","grid","map","gridBorder","result","spinner","spinner_off","spinner_on","getSpinnerClasses","win","lose","tie","playAgain","menu","NewScoreView","resultMessage","resultClassName","scoreMessage","RankingView","props","message","Routing","atEnter","opacity","atLeave","atActive","mainStyles","switch","exact","path","component","ResizeManager","children","updateWindowSize","changeWindowSize","innerWidth","innerHeight","removeResizeListeners","removeEventListener","useEffect","addEventListener","IntlManager","intlSelector","isImmutable","toJS","App","store","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c4d15837.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"NewScoreView_main__156f7\",\"win\":\"NewScoreView_win__2EbAm\",\"lose\":\"NewScoreView_lose__sUqLh\",\"tie\":\"NewScoreView_tie__4SVIY\",\"resultMessage\":\"NewScoreView_resultMessage__3BsiP\",\"scoreMessage\":\"NewScoreView_scoreMessage__3iP2B\",\"button\":\"NewScoreView_button__1_nT3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"HomeView_main__1ijha\",\"titleArea\":\"HomeView_titleArea__2Q3aV\",\"title\":\"HomeView_title__3p63q\",\"buttonsArea\":\"HomeView_buttonsArea__3AiDv\",\"button\":\"HomeView_button__2_QRY\",\"languageSelector\":\"HomeView_languageSelector__2-uOg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"GameView_main__3bn2r\",\"grid\":\"GameView_grid__3GPVN\",\"gridBorder\":\"GameView_gridBorder__2b5eK\",\"spinner\":\"GameView_spinner__txjYv\",\"spinner_on\":\"GameView_spinner_on__3Ck1H\",\"spinner_off\":\"GameView_spinner_off__FWi7c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"BackgroundAnimationLines_main__2awhn\",\"line\":\"BackgroundAnimationLines_line__1i1SU\",\"run\":\"BackgroundAnimationLines_run__2xacH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"LanguageSelector_main__2GS8I\",\"button\":\"LanguageSelector_button__2sQML\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"RoundedButton_main__1m_8d\",\"icon\":\"RoundedButton_icon__3enWu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"RankingView_main__2g86E\",\"message\":\"RankingView_message__3FXlo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"HomeButton_main__3f4a5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"RotationSpinner_main__1UeyR\",\"spinnerAnimation\":\"RotationSpinner_spinnerAnimation__1Jcos\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"switch\":\"MainStyles_switch__2LEKm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"GridEntry_main__3rpKB\",\"selectable\":\"GridEntry_selectable__3DaU7\",\"icon\":\"GridEntry_icon__38EMH\",\"icon_selectedByUser\":\"GridEntry_icon_selectedByUser__3T9Du\",\"icon_selectedByMachine\":\"GridEntry_icon_selectedByMachine__BpR2f\",\"icon_forOverState\":\"GridEntry_icon_forOverState__15DCd\",\"icon_disabled\":\"GridEntry_icon_disabled__2xD6w\",\"icon_enabled\":\"GridEntry_icon_enabled__2N-Rf\"};","export const SCORE = 'score';\nexport const GAME_IN_COURSE = 'gameInCourse';\nexport const ID = 'id';\nexport const GRID = 'grid';\nexport const SELECTED_BY_USER = 'selectedByUser';\nexport const SELECTED_BY_MACHINE = 'selectedByMachine';\nexport const USER_CAN_SELECT = 'userCanSelect';\nexport const GRID_ENTRIES = 9; // Standard Tic Tac Toe.\nexport const USER = 'user';\nexport const MACHINE = 'machine';\nexport const WINNER = 'winner';\nexport const GRID_KEYS = Array.from({length: GRID_ENTRIES}, (v, k) => k);\n\nexport const WIN_COMBINATIONS =\n    [\n      [0, 1, 2], [3, 4, 5], [6, 7, 8], // Horizontals\n      [0, 3, 6], [1, 4, 7], [2, 5, 8], // Verticals\n      [0, 4, 8], [2, 4, 6], // Diagonals\n    ];\n","import {WIN_COMBINATIONS} from 'actions/currentGame/currentGameConstants';\n\nexport const hasWinnerCombination = (ids) =>\n    ids && ids.size >= 3 && // If there is less than 3 grid entries selected, it hasn't win\n    WIN_COMBINATIONS.reduce((hasWinnerCombination, currentWinnerCombination) =>\n    {\n      if (hasWinnerCombination)\n        return hasWinnerCombination;\n\n      return currentWinnerCombination.every(id => ids.includes(id));\n    }, false);","import Immutable from 'immutable';\nimport {END_GAME, START_GAME, CHANGE_CURRENT_SCORE, SELECT_GRID_ENTRY, SET_WINNER} from 'actions/currentGame/currentGameActionsTypes';\nimport {GAME_IN_COURSE, SCORE, ID, SELECTED_BY_USER, SELECTED_BY_MACHINE, GRID, USER_CAN_SELECT, GRID_ENTRIES, USER, MACHINE, WINNER} from 'actions/currentGame/currentGameConstants';\nimport {hasWinnerCombination} from 'actions/currentGame/currentGameUtil'\n\nexport const initialState = Immutable.fromJS(\n    {\n      [SCORE]: 10000,\n      [GAME_IN_COURSE]: false,\n      [USER_CAN_SELECT]: true,\n      [WINNER]: null,\n      [GRID]: {\n        /**\n         * 0: ...\n         * 1: ...\n         * 2: ...\n         */\n      },\n    });\n\nexport default (state = initialState, action) =>\n{\n  switch (action.type)\n  {\n    case START_GAME:\n      return initialState.set(GAME_IN_COURSE, true);\n    case END_GAME:\n      return state.set(GAME_IN_COURSE, false);\n    case SET_WINNER:\n      return state.set(WINNER, action.payload[WINNER])\n          .update(SCORE, score => action.payload[WINNER] ? score + 10000 : score);\n    case CHANGE_CURRENT_SCORE:\n      return state.set(SCORE, action.payload[SCORE]);\n    case SELECT_GRID_ENTRY:\n      return state.setIn([GRID, action.payload[ID]],\n          action.payload[SELECTED_BY_USER] ? SELECTED_BY_USER : SELECTED_BY_MACHINE)\n          .update(SCORE, score => score - 500)\n          .set(USER_CAN_SELECT, !action.payload[SELECTED_BY_USER]);\n\n    default:\n      return state;\n\n  }\n}\n\nexport const isGameInCourse = (state) => state.get(GAME_IN_COURSE);\n\nexport const getScore = (state) => state.get(SCORE);\n\nexport const getGridEntryContent = (state, id) => state.getIn([GRID, id]);\n\nexport const canUserSelect = (state) => state.get(USER_CAN_SELECT) && !isGameFinished(state);\n\n\nconst getAvailableGridEntriesIds = (state) =>\n    Array.from({length: GRID_ENTRIES}, (v, k) => k)\n        .filter(id => !getGridEntryContent(state, id));\n\nexport const getRandomAvailableGridEntryId = (state) =>\n{\n  const availableGridEntriesIds = getAvailableGridEntriesIds(state);\n\n  return availableGridEntriesIds[Math.floor(Math.random() * availableGridEntriesIds.length)];\n};\n\nconst getGridEntriesFilterByWhoSelected = (state, selectedByUserType) =>\n    state.get(GRID)\n        .reduce((accum, value, key) =>\n        {\n\n          if (value === selectedByUserType)\n          {\n            return accum.push(key);\n          } else\n          {\n            return accum;\n          }\n\n        }, Immutable.List());\n\nexport const isWinner = (state, userType) =>\n{\n\n  if (userType === USER)\n  {\n    return hasWinnerCombination(getGridEntriesFilterByWhoSelected(state, SELECTED_BY_USER));\n  } else if (userType === MACHINE)\n  {\n    return hasWinnerCombination(getGridEntriesFilterByWhoSelected(state, SELECTED_BY_MACHINE));\n  } else\n  {\n    return false;\n  }\n};\n\nexport const getWinner = (state) =>\n{\n\n  if (state.get(WINNER))\n    return state.get(WINNER);\n\n\n  if (isWinner(state, USER))\n  {\n    return USER;\n  } else if (isWinner(state, MACHINE))\n  {\n    return MACHINE;\n  } else\n  {\n    return null;\n  }\n};\n\nconst getFilledGridEntriesMap = (state) => state.get(GRID).filter(entry => entry != null);\n\nexport const isGameFinished = (state) => getFilledGridEntriesMap(state).size === GRID_ENTRIES || getWinner(state) != null;","import Immutable from 'immutable';\nimport {ADD_NEW_SCORE} from 'actions/ranking/rankingActionsTypes';\nimport {SCORE, NAME} from 'actions/ranking/rankingConstants';\n\nconst initialState = Immutable.List([\n  /*\n   * Element example in list:\n   *\n   * {\n   *   [SCORE]: scoreValue,\n   *   [NAME]: nameValue,\n   * }\n   */\n\n])\nexport default (state = initialState, action) =>\n{\n  switch (action.type)\n  {\n    case ADD_NEW_SCORE:\n\n      const score = action.payload[SCORE];\n      const name = action.payload[NAME];\n\n      // Look if the same gamer has already played\n\n      const gamerIndex = state.findIndex(game => game.get(NAME) === name);\n\n      if (gamerIndex === -1)\n      {\n        state = state.push(Immutable.Map({\n          [SCORE]: score,\n          [NAME]: name,\n        }));\n      } else\n      {\n        state = state.setIn([gamerIndex, SCORE], score);\n      }\n      return state.sortBy((scoreEntry) => scoreEntry.get(SCORE));\n    default:\n      return state;\n\n  }\n}\n\nexport const getRanking = (state) => state;","import Immutable from 'immutable';\nimport {CHANGE_WINDOW_SIZE} from 'actions/screen/screenActionsTypes';\nimport {WIDTH, HEIGHT} from 'actions/screen/screenConstants';\n\nconst WINDOW_WIDTH = 'windowWidth';\nconst WINDOW_HEIGHT = 'windowHeight';\n\nconst initialState = Immutable.Map();\n\nexport default (state = initialState, action) =>\n{\n  switch (action.type)\n  {\n    case CHANGE_WINDOW_SIZE:\n\n      return state.set(WINDOW_WIDTH, action.payload[WIDTH])\n          .set(WINDOW_HEIGHT, action.payload[HEIGHT]);\n    default:\n      return state;\n\n  }\n}\n\nexport const getWindowWidth = (state) => state.get(WINDOW_WIDTH);\n\nexport const getWindowHeight = (state) => state.get(WINDOW_HEIGHT);\n\n","import {combineReducers} from 'redux-immutable'\nimport currentGameReducer, * as currentGameSelectors from 'reducers/currentGame/currentGameReducer';\nimport rankingReducer from 'reducers/ranking/rankingReducer';\nimport screenReducer, * as screenSelectors from 'reducers/screen/screenReducer';\nimport {intlReducer} from 'react-intl-redux'\n\nconst CURRENT_GAME = 'currentGame';\nconst RANKING = 'ranking';\nconst SCREEN = 'screen';\nexport const INTL = 'intl';\n\nexport default combineReducers({\n  [CURRENT_GAME]: currentGameReducer,\n  [RANKING]: rankingReducer,\n  [SCREEN]: screenReducer,\n  [INTL]: intlReducer,\n});\n\n\nexport const isGameInCourse = (state) => currentGameSelectors.isGameInCourse(state.get(CURRENT_GAME));\n\nexport const getCurrentScore = (state) => currentGameSelectors.getScore(state.get(CURRENT_GAME));\n\nexport const canUserSelect = (state) => currentGameSelectors.canUserSelect(state.get(CURRENT_GAME));\n\nexport const getRandomAvailableGridEntryId = (state) => currentGameSelectors.getRandomAvailableGridEntryId(state.get(CURRENT_GAME));\n\nexport const getWinner = (state) => currentGameSelectors.getWinner(state.get(CURRENT_GAME));\n\n\nexport const isGameFinished = (state) => currentGameSelectors.isGameFinished(state.get(CURRENT_GAME));\n\nexport const getScore = (state) => currentGameSelectors.getScore(state.get(CURRENT_GAME));\n\nexport const getGridEntryContent = (state, id) => currentGameSelectors.getGridEntryContent(state.get(CURRENT_GAME), id);\n\nexport const getWindowWidth = (state) => screenSelectors.getWindowWidth(state.get(SCREEN));\n\nexport const getWindowHeight = (state) => screenSelectors.getWindowHeight(state.get(SCREEN));\n","export const START_GAME = 'startGame';\nexport const END_GAME = 'endGame';\nexport const CHANGE_CURRENT_SCORE = 'changeCurrentScore';\nexport const SELECT_GRID_ENTRY = 'selectGridEntry';\nexport const SET_WINNER = 'setWinner';","export const ADD_NEW_SCORE = 'addNewScore';","export const NAME = 'name';\nexport const SCORE = 'score';","export const CHANGE_WINDOW_SIZE = 'changeWindowSize';","import {createStore, applyMiddleware, compose} from 'redux';\nimport rootReducer from 'reducers/rootReducer';\nimport reduxThunk from 'redux-thunk';\n\nconst composeEnhancers =\n    process.env.NODE_ENV !== 'production' &&\n    typeof window === 'object' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n          // Specify here name, actionsBlacklist, actionsCreators and other options\n        }) : compose;\n\nconst enhancer = composeEnhancers(\n    applyMiddleware(reduxThunk),\n    // other store enhancers if any\n);\n\nexport default createStore(rootReducer, enhancer);\n","import React from 'react';\nimport styles from './BackgroundAnimationLines.module.css'\n\nexport default React.memo(() =>\n    <div className={styles.main}>\n      <div className={styles.line}/>\n      <div className={styles.line}/>\n      <div className={styles.line}/>\n      <div className={styles.line}/>\n    </div>);\n","/**\n * Merge Class Names\n * @param args {String} Class names to merge\n * @return {String} Resulting merged class mames\n */\nexport const mergeClasses = (...args) => args.join(' ');","import React from 'react';\nimport styles from './HomeButton.module.css'\nimport PropTypes from 'prop-types';\nimport {mergeClasses} from \"util/StyleUtil\";\nimport {Link} from 'react-router-dom';\n\nconst HomeButton = React.memo(({label, className, to, onClick}) =>\n    <Link className={mergeClasses(styles.main, className)}\n          to={to} onClick={onClick}>\n      {label}\n    </Link>);\n\nHomeButton.propTypes = {\n  label: PropTypes.string,\n  className: PropTypes.string,\n  to: PropTypes.string,\n  onClick: PropTypes.func,\n};\n\nexport default HomeButton\n","import {createAction} from 'redux-actions';\nimport {START_GAME, END_GAME, CHANGE_CURRENT_SCORE, SELECT_GRID_ENTRY, SET_WINNER} from 'actions/currentGame/currentGameActionsTypes';\nimport {getRandomAvailableGridEntryId, getWinner, isGameFinished} from 'reducers/rootReducer';\nimport {SCORE, ID, SELECTED_BY_USER, WINNER} from 'actions/currentGame/currentGameConstants';\nimport {NEW_SCORE} from 'routing/routes';\n\nexport const startGame = () => createAction(START_GAME)({});\nexport const endGame = () => createAction(END_GAME)({});\nexport const changeCurrentScore = (score) => createAction(CHANGE_CURRENT_SCORE)({[SCORE]: score});\nexport const setWinner = (winner) => createAction(SET_WINNER)({[WINNER]: winner});\n\nconst MACHINE_ANSWER_DELAY_IN_MS = 2000;\nconst AFTER_WIN_DELAY = 2000;\n\nconst getSelectGridEntryAction = (id, selectedByUser) => createAction(SELECT_GRID_ENTRY)(\n    {\n      [ID]: id,\n      [SELECTED_BY_USER]: selectedByUser,\n    });\n\nexport const selectGridEntry = (id) => (dispatch, getState) =>\n{\n  // Dispatch User selection\n  dispatch(getSelectGridEntryAction(id, true));\n\n  // CheckIfGameIsFinished\n\n  checkIfSomeoneWins(dispatch, getState);\n\n  if (!isGameFinished(getState()))\n  {\n    // Choose a random grid entry\n    const machineRandomSelectedId = getRandomAvailableGridEntryId(getState());\n\n    setTimeout(() =>\n    {\n      dispatch(getSelectGridEntryAction(machineRandomSelectedId, false))\n      checkIfSomeoneWins(dispatch, getState);\n    }, MACHINE_ANSWER_DELAY_IN_MS)\n  }\n\n\n};\n\nconst checkIfSomeoneWins = (dispatch, getState) =>\n{\n\n  if (isGameFinished(getState()))\n  {\n\n    const winner = getWinner(getState());\n\n    setTimeout(() =>\n        {\n          window.location.hash = NEW_SCORE;\n          dispatch(setWinner(winner))\n        }\n        , AFTER_WIN_DELAY)\n  }\n};\n","export const HOME_PATH = '/home';\nexport const GAME_PATH = '/game';\nexport const NEW_SCORE = '/new-score';\nexport const RANKING_PATH = '/ranking';","import React from 'react';\nimport styles from './RoundedButton.module.css'\nimport PropTypes from 'prop-types';\nimport {mergeClasses} from \"util/StyleUtil\";\n\nconst RoundedButton = React.memo(({className, onClick, icon: Icon}) =>\n    <div className={mergeClasses(styles.main, className)} onClick={onClick}>\n      <Icon className={styles.icon}/>\n    </div>);\n\nRoundedButton.propTypes = {\n  className: PropTypes.string,\n  onClick: PropTypes.func,\n  icon: PropTypes.elementType,\n};\n\nexport default RoundedButton\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst SpainFlagIcon = React.memo(({className}) =>\n{\n  return <svg className={className} viewBox=\"0 0 512 512\">\n    <path style={{fill: '#FFDA44'}} d=\"M0,256c0,31.314,5.633,61.31,15.923,89.043L256,367.304l240.077-22.261\n\tC506.367,317.31,512,287.314,512,256s-5.633-61.31-15.923-89.043L256,144.696L15.923,166.957C5.633,194.69,0,224.686,0,256z\"/>\n    <g>\n      <path style={{fill: \"#D80027\"}}\n            d=\"M496.077,166.957C459.906,69.473,366.071,0,256,0S52.094,69.473,15.923,166.957H496.077z\"/>\n      <path style={{fill: \"#D80027\"}}\n            d=\"M15.923,345.043C52.094,442.527,145.929,512,256,512s203.906-69.473,240.077-166.957H15.923z\"/>\n    </g>\n  </svg>\n});\n\nSpainFlagIcon.propTypes = {\n  className: PropTypes.string,\n};\n\nexport default SpainFlagIcon;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst FranceFlagIcon = React.memo(({className}) =>\n{\n  return <svg className={className} viewBox=\"0 0 512 512\">\n    <circle style={{fill: \"#F0F0F0\"}} cx=\"256\" cy=\"256\" r=\"256\"/>\n    <path style={{fill: \"#D80027\"}}\n          d=\"M512,256c0-110.071-69.472-203.906-166.957-240.077v480.155C442.528,459.906,512,366.071,512,256z\"/>\n    <path style={{fill: \"#0052B4\"}}\n          d=\"M0,256c0,110.071,69.473,203.906,166.957,240.077V15.923C69.473,52.094,0,145.929,0,256z\"/>\n  </svg>\n});\n\nFranceFlagIcon.propTypes = {\n  className: PropTypes.string,\n};\n\nexport default FranceFlagIcon;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst UnitedKingdomFlagIcon = React.memo(({className}) =>\n{\n  return <svg className={className} viewBox=\"0 0 512 512\">\n    <circle style={{fill: \"#F0F0F0\"}} cx=\"256\" cy=\"256\" r=\"256\"/>\n    <g>\n      <path style={{fill: \"#0052B4\"}}\n            d=\"M52.92,100.142c-20.109,26.163-35.272,56.318-44.101,89.077h133.178L52.92,100.142z\"/>\n      <path style={{fill: \"#0052B4\"}}\n            d=\"M503.181,189.219c-8.829-32.758-23.993-62.913-44.101-89.076l-89.075,89.076H503.181z\"/>\n      <path style={{fill: \"#0052B4\"}} d=\"M8.819,322.784c8.83,32.758,23.993,62.913,44.101,89.075l89.074-89.075L8.819,322.784L8.819,322.784\n\t\tz\"/>\n      <path style={{fill: \"#0052B4\"}}\n            d=\"M411.858,52.921c-26.163-20.109-56.317-35.272-89.076-44.102v133.177L411.858,52.921z\"/>\n      <path style={{fill: \"#0052B4\"}}\n            d=\"M100.142,459.079c26.163,20.109,56.318,35.272,89.076,44.102V370.005L100.142,459.079z\"/>\n      <path style={{fill: \"#0052B4\"}} d=\"M189.217,8.819c-32.758,8.83-62.913,23.993-89.075,44.101l89.075,89.075V8.819z\"/>\n      <path style={{fill: \"#0052B4\"}}\n            d=\"M322.783,503.181c32.758-8.83,62.913-23.993,89.075-44.101l-89.075-89.075V503.181z\"/>\n      <path style={{fill: \"#0052B4\"}}\n            d=\"M370.005,322.784l89.075,89.076c20.108-26.162,35.272-56.318,44.101-89.076H370.005z\"/>\n    </g>\n    <g>\n      <path style={{fill: \"#D80027\"}} d=\"M509.833,222.609h-220.44h-0.001V2.167C278.461,0.744,267.317,0,256,0\n\t\tc-11.319,0-22.461,0.744-33.391,2.167v220.44v0.001H2.167C0.744,233.539,0,244.683,0,256c0,11.319,0.744,22.461,2.167,33.391\n\t\th220.44h0.001v220.442C233.539,511.256,244.681,512,256,512c11.317,0,22.461-0.743,33.391-2.167v-220.44v-0.001h220.442\n\t\tC511.256,278.461,512,267.319,512,256C512,244.683,511.256,233.539,509.833,222.609z\"/>\n      <path style={{fill: \"#D80027\"}} d=\"M322.783,322.784L322.783,322.784L437.019,437.02c5.254-5.252,10.266-10.743,15.048-16.435\n\t\tl-97.802-97.802h-31.482V322.784z\"/>\n      <path style={{fill: \"#D80027\"}} d=\"M189.217,322.784h-0.002L74.98,437.019c5.252,5.254,10.743,10.266,16.435,15.048l97.802-97.804\n\t\tV322.784z\"/>\n      <path style={{fill: \"#D80027\"}} d=\"M189.217,189.219v-0.002L74.981,74.98c-5.254,5.252-10.266,10.743-15.048,16.435l97.803,97.803\n\t\tH189.217z\"/>\n      <path style={{fill: \"#D80027\"}} d=\"M322.783,189.219L322.783,189.219L437.02,74.981c-5.252-5.254-10.743-10.266-16.435-15.047\n\t\tl-97.802,97.803V189.219z\"/>\n    </g>\n  </svg>\n\n});\n\nUnitedKingdomFlagIcon.propTypes = {\n  className: PropTypes.string,\n};\n\nexport default UnitedKingdomFlagIcon;","import React, {useCallback} from 'react';\nimport PropTypes from \"prop-types\";\nimport styles from './LanguageSelector.module.css';\nimport {mergeClasses} from \"util/StyleUtil\";\nimport RoundedButton from 'components/button/rounded/RoundedButton';\nimport SpainFlagIcon from 'icons/flags/SpainFlagIcon';\nimport FranceFlagIcon from 'icons/flags/FranceFlagIcon';\nimport UnitedKingdomFlagIcon from 'icons/flags/UnitedKingdomFlagIcon';\nimport {useDispatch} from \"react-redux\";\nimport enUK from 'intl/messages/enUK';\nimport esES from 'intl/messages/esES';\nimport frFR from 'intl/messages/frFR';\nimport {ENGLISH_UK, SPANISH_SPAIN, FRENCH_FRANCE} from \"intl/LanguagesCodes\";\nimport {updateIntl} from \"react-intl-redux\";\n\n\nconst LanguageSelector = React.memo(({className}) =>\n{\n\n  // Redux dispatch\n  const dispatch = useDispatch();\n\n  // Callbacks\n  const onEnglishSelected = useCallback(() => dispatch(updateIntl({\n    locale: ENGLISH_UK,\n    messages: enUK\n  })), [dispatch]);\n  const onSpanishSelected = useCallback(() => dispatch(updateIntl({\n    locale: SPANISH_SPAIN,\n    messages: esES\n  })), [dispatch]);\n  const onFrenchSelected = useCallback(() => dispatch(updateIntl({\n    locale: FRENCH_FRANCE,\n    messages: frFR\n  })), [dispatch]);\n\n\n  return <div className={mergeClasses(styles.main, className)}>\n    <RoundedButton className={styles.button} icon={UnitedKingdomFlagIcon} onClick={onEnglishSelected}/>\n    <RoundedButton className={styles.button} icon={SpainFlagIcon} onClick={onSpanishSelected}/>\n    <RoundedButton className={styles.button} icon={FranceFlagIcon} onClick={onFrenchSelected}/>\n  </div>\n});\n\nLanguageSelector.propTypes = {\n  className: PropTypes.string,\n};\n\n\nexport default LanguageSelector;","export const ENGLISH_UK = 'en-UK';\nexport const FRENCH_FRANCE = 'fr-FR';\nexport const SPANISH_SPAIN = 'es-ES';","import React, {useCallback} from 'react';\nimport styles from './HomeView.module.css';\nimport BackgroundAnimationLines from 'components/background/BackgroundAnimationLines';\nimport HomeButton from 'components/button/home/HomeButton';\nimport {GAME_PATH} from 'routing/routes';\nimport {startGame} from 'actions/currentGame/currentGameActionsCreators'\nimport {useDispatch} from 'react-redux';\nimport {useIntl, defineMessages} from \"react-intl\";\nimport LanguageSelector from 'components/selectors/language/LanguageSelector';\n\nexport const messages = defineMessages({\n  title: {\n    id: 'home.title',\n    defaultMessage: 'Tic Tac Toe'\n  },\n  start: {\n    id: 'home.start',\n    defaultMessage: 'Start'\n  },\n\n});\n\nconst HomeView = React.memo(() =>\n{\n  // Redux dispatch\n  const dispatch = useDispatch();\n\n  // Intl\n  const intl = useIntl();\n\n  // Callbacks\n  const onStartButtonClicked = useCallback(() => dispatch(startGame()), [dispatch]);\n\n  return <div className={styles.main}>\n    <BackgroundAnimationLines/>\n    <div className={styles.titleArea}>\n      <span className={styles.title}>{intl.formatMessage(messages.title)}</span>\n    </div>\n    <div className={styles.buttonsArea}>\n      <HomeButton className={styles.button} label={intl.formatMessage(messages.start)} to={GAME_PATH}\n                  onClick={onStartButtonClicked}/>\n      {/* <HomeButton className={styles.button} label={'RANKING'} to={RANKING_PATH}/>*/}\n      <LanguageSelector className={styles.languageSelector}/>\n    </div>\n  </div>\n});\n\nexport default HomeView;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst CircleIcon = React.memo(({className}) =>\n{\n  return <svg className={className} viewBox=\"0 0 512 512\">\n    <path d=\"M255.832,56.037c110.44,0.096,199.891,89.691,199.795,200.131s-89.691,199.891-200.131,199.795\n\tC145.127,455.867,55.701,366.368,55.701,256C55.877,145.568,145.399,56.117,255.832,56.037 M255.832,0\n\tC114.443,0.096-0.096,114.779,0,256.168S114.779,512.096,256.168,512C397.485,511.904,512,397.317,512,256\n\tC511.952,114.571,397.261-0.048,255.832,0z\"/>\n\n  </svg>\n\n});\n\nCircleIcon.propTypes = {\n  className: PropTypes.string,\n};\n\nexport default CircleIcon;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst CrossIcon = React.memo(({className}) =>\n{\n  return <svg className={className} viewBox=\"0 0 329.26933 329\">\n    <path\n        d=\"m194.800781 164.769531 128.210938-128.214843c8.34375-8.339844 8.34375-21.824219 0-30.164063-8.339844-8.339844-21.824219-8.339844-30.164063 0l-128.214844 128.214844-128.210937-128.214844c-8.34375-8.339844-21.824219-8.339844-30.164063 0-8.34375 8.339844-8.34375 21.824219 0 30.164063l128.210938 128.214843-128.210938 128.214844c-8.34375 8.339844-8.34375 21.824219 0 30.164063 4.15625 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921875-2.089844 15.082031-6.25l128.210937-128.214844 128.214844 128.214844c4.160156 4.160156 9.621094 6.25 15.082032 6.25 5.460937 0 10.921874-2.089844 15.082031-6.25 8.34375-8.339844 8.34375-21.824219 0-30.164063zm0 0\"/>\n  </svg>\n});\n\nCrossIcon.propTypes = {\n  className: PropTypes.string,\n};\n\nexport default CrossIcon;","import React from 'react';\nimport Proptypes from 'prop-types';\nimport styles from './GridEntry.module.css'\nimport {useDispatch, useSelector} from 'react-redux';\nimport * as rootReducer from \"reducers/rootReducer\"\nimport {selectGridEntry} from 'actions/currentGame/currentGameActionsCreators';\nimport {SELECTED_BY_USER, SELECTED_BY_MACHINE} from 'actions/currentGame/currentGameConstants';\nimport {mergeClasses} from \"util/StyleUtil\";\nimport CircleIcon from \"icons/CircleIcon\";\nimport CrossIcon from \"icons/CrossIcon\";\n\nexport const BORDER_PROPORTION = 0.05;\n\nconst GridEntry = React.memo(({id, sizeInPx}) =>\n{\n  // Redux selectors\n  const gridEntryContent = useSelector(state => rootReducer.getGridEntryContent(state, id));\n  const canUserSelect = useSelector(state => rootReducer.canUserSelect(state));\n\n  // Redux dispatch\n\n  const dispatch = useDispatch();\n\n  // Styles\n  const borderWidth = Math.floor(sizeInPx * BORDER_PROPORTION) || 0;\n  const innerSize = sizeInPx - borderWidth * 2;\n\n  let mainInlineStyles = {\n    borderWidth,\n    width: innerSize,\n    height: innerSize,\n  };\n\n  let mainClassNames = styles.main;\n\n  const gridEntryIsSelectable = canUserSelect && !gridEntryContent;\n  if (gridEntryIsSelectable)\n  {\n    mainClassNames = mergeClasses(mainClassNames, styles.selectable);\n  }\n\n  // Getters\n  const getIcon = () =>\n  {\n    if (gridEntryContent === SELECTED_BY_USER)\n    {\n      return <CrossIcon className={mergeClasses(styles.icon, styles.icon_selectedByUser)}/>\n    } else if (gridEntryContent === SELECTED_BY_MACHINE)\n    {\n      return <CircleIcon className={mergeClasses(styles.icon, styles.icon_selectedByMachine, styles.icon_enabled)}/>\n    } else if (!gridEntryContent && canUserSelect)\n    {\n      return <CrossIcon className={mergeClasses(styles.icon, styles.icon_selectedByUser, styles.icon_forOverState)}/>\n    } else\n    {\n      return <CircleIcon className={mergeClasses(styles.icon, styles.icon_selectedByMachine, styles.icon_disabled)}/>\n    }\n  };\n\n  // Callbacks\n  const onClick = () => gridEntryIsSelectable && dispatch(selectGridEntry(id));\n\n  return <div className={mainClassNames} onClick={onClick}\n              style={mainInlineStyles}>\n    <span className={gridEntryContent === SELECTED_BY_USER ? styles.selectedByUser : styles.selectedByMachine}>\n      {getIcon()}\n    </span>\n\n  </div>;\n});\n\nGridEntry.propTypes = {\n  id: Proptypes.number,\n  sizeInPx: Proptypes.number,\n};\n\nexport default GridEntry;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {mergeClasses} from \"util/StyleUtil\";\nimport styles from './RotationSpinner.module.css';\n\nconst RotationSpinner = ({className}) =>\n    <div className={mergeClasses(className, styles.main)}/>\n\nRotationSpinner.propTypes = {\n  className: PropTypes.string,\n};\n\nexport default RotationSpinner;\n","import React from 'react';\nimport styles from './GameView.module.css'\nimport {useSelector} from \"react-redux\";\nimport {GRID_KEYS} from 'actions/currentGame/currentGameConstants';\nimport GridEntry from 'components/grid/GridEntry';\nimport {getGameViewStyles} from './GameViewStyleUtils';\nimport RotationSpinner from 'components/spinners/RotationSpinner';\nimport {mergeClasses} from \"util/StyleUtil\";\nimport * as rootReducer from \"reducers/rootReducer\";\n\nconst GameView = React.memo(() =>\n{\n  // Redux selectors\n  const windowWidth = useSelector(state => rootReducer.getWindowWidth(state));\n  const windowHeight = useSelector(state => rootReducer.getWindowHeight(state));\n  const canUserSelect = useSelector(state => rootReducer.canUserSelect(state));\n\n  // Styles\n  const {\n    gridInlineStyles,\n    gridEntryInlineStyles,\n    gridEntrySizeInPx\n  } = getGameViewStyles(windowWidth, windowHeight);\n\n  const getSpinnerClasses = () =>\n  {\n    let result = styles.spinner;\n\n    if (canUserSelect)\n    {\n      result = mergeClasses(result, styles.spinner_off);\n    } else\n    {\n      result = mergeClasses(result, styles.spinner_on);\n    }\n    return result;\n  };\n\n  return <div className={styles.main}>\n    <div className={styles.grid} style={gridInlineStyles}>\n      {/* Create 9 cells */}\n      {GRID_KEYS.map(key => <GridEntry id={key} key={key} sizeInPx={gridEntrySizeInPx}/>)}\n      <div className={styles.gridBorder} style={gridEntryInlineStyles}/>\n    </div>\n    <RotationSpinner className={getSpinnerClasses()}/>\n  </div>;\n});\n\n\nexport default GameView;","import {BORDER_PROPORTION} from 'components/grid/GridEntry';\n\nconst MAX_GRID_SIZE_IN_PX = 1000;\nconst MIN_MARGIN_IN_PX = 30;\n\nexport const getGameViewStyles = (windowWidth, windowHeight) =>\n{\n\n  let gridSizeInPx;\n  const windowSmallerSizeInPx = Math.min(windowWidth, windowHeight);\n\n  if (windowSmallerSizeInPx > MAX_GRID_SIZE_IN_PX)\n  {\n    gridSizeInPx = MAX_GRID_SIZE_IN_PX;\n  } else\n  {\n    gridSizeInPx = windowSmallerSizeInPx - MIN_MARGIN_IN_PX;\n  }\n\n  const gridEntrySizeInPx = Math.floor(gridSizeInPx / 3);\n\n  const gridBorderWidth = Math.ceil(gridEntrySizeInPx * BORDER_PROPORTION);\n\n  const gridEntryInlineStyles = {\n    borderWidth: gridBorderWidth,\n    width: `calc(100% - ${gridBorderWidth * 2}px)`,\n    height: `calc(100% - ${gridBorderWidth * 2}px)`,\n  };\n\n  const gridSize = `${gridEntrySizeInPx * 3}px`;\n\n  const gridInlineStyles = {\n    width: gridSize,\n    height: gridSize,\n  };\n\n  return {\n    gridEntryInlineStyles,\n    gridInlineStyles,\n    gridEntrySizeInPx,\n  }\n};\n\n","import React, {useCallback} from 'react';\nimport styles from './NewScoreView.module.css';\nimport {getWinner, getScore} from \"reducers/rootReducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {USER, MACHINE} from 'actions/currentGame/currentGameConstants'\nimport BackgroundAnimationLines from \"components/background/BackgroundAnimationLines\";\nimport {defineMessages, useIntl} from \"react-intl\";\nimport HomeButton from \"components/button/home/HomeButton\";\nimport {GAME_PATH, HOME_PATH} from \"routing/routes\";\nimport {startGame} from \"actions/currentGame/currentGameActionsCreators\";\nimport {mergeClasses} from \"util/StyleUtil\";\n\nexport const messages = defineMessages({\n  win: {\n    id: 'score.win',\n    defaultMessage: 'You win!'\n  },\n  lose: {\n    id: 'score.lose',\n    defaultMessage: 'You lost...'\n  },\n  tie: {\n    id: 'score.tie',\n    defaultMessage: 'Nobody wins'\n  },\n  score: {\n    id: 'score.score',\n    defaultMessage: 'Your score is'\n  },\n  playAgain: {\n    id: 'score.playAgain',\n    defaultMessage: 'Play again'\n  },\n  menu: {\n    id: 'score.menu',\n    defaultMessage: 'Menu'\n  },\n\n});\n\nconst NewScoreView = React.memo(() =>\n{\n  // Redux selectors\n  const winner = useSelector(state => getWinner(state));\n  const score = useSelector(state => getScore(state));\n\n  // Redux dispatch\n  const dispatch = useDispatch();\n\n  // Intl\n  const intl = useIntl();\n\n  let resultMessage;\n  let resultClassName;\n\n  if (winner === USER)\n  {\n    resultMessage = intl.formatMessage(messages.win);\n    resultClassName = styles.win;\n  } else if (winner === MACHINE)\n  {\n    resultMessage = intl.formatMessage(messages.lose);\n    resultClassName = styles.lose;\n  } else\n  {\n    resultMessage = intl.formatMessage(messages.tie);\n    resultClassName = styles.tie;\n  }\n\n  // Callbacks\n  const onStartButtonClicked = useCallback(() => dispatch(startGame()), [dispatch]);\n\n  return <div className={mergeClasses(styles.main, resultClassName)}>\n    <BackgroundAnimationLines/>\n    <span className={styles.resultMessage}>{resultMessage}</span>\n    <span className={styles.scoreMessage}>{`${intl.formatMessage(messages.score)} ${score}`}</span>\n\n    <HomeButton className={styles.button} label={intl.formatMessage(messages.playAgain)} to={GAME_PATH}\n                onClick={onStartButtonClicked}/>\n    <HomeButton className={styles.button} label={intl.formatMessage(messages.menu)} to={HOME_PATH}/>\n  </div>\n});\n\nexport default NewScoreView;","import React from 'react';\nimport styles from './RankingView.module.css';\n\nconst RankingView = React.memo((props) =>\n{\n  return <div className={styles.main}>\n    <span className={styles.message}/>\n  </div>\n});\n\nexport default RankingView;","import React from \"react\";\nimport HomeView from \"views/home/HomeView\";\nimport GameView from \"views/game/GameView\";\nimport NewScoreView from \"views/newScore/NewScoreView\";\nimport RankingView from \"views/ranking/RankingView\";\nimport {Route, Redirect} from \"react-router-dom\";\nimport {HOME_PATH, GAME_PATH, NEW_SCORE, RANKING_PATH} from 'routing/routes'\nimport {AnimatedSwitch} from 'react-router-transition';\nimport mainStyles from 'style/MainStyles.module.css'\n\nconst Routing = () =>\n\n    <AnimatedSwitch atEnter={{opacity: 0}}\n                    atLeave={{opacity: 0}}\n                    atActive={{opacity: 1}}\n                    className={mainStyles.switch}>\n      <Route exact path={HOME_PATH} component={HomeView}/>\n      <Route exact path={GAME_PATH} component={GameView}/>\n      <Route exact path={NEW_SCORE} component={NewScoreView}/>\n      <Route exact path={RANKING_PATH} component={RankingView}/>\n      <Redirect to={HOME_PATH}/>\n    </AnimatedSwitch>;\n\n\nexport default Routing;","import {useEffect, useCallback} from 'react';\nimport {changeWindowSize} from 'actions/screen/screenActionsCreators';\nimport {useDispatch} from \"react-redux\";\n\n/**\n * Wrapper component that is used only to record the screen size\n */\nconst ResizeManager = ({children}) =>\n{\n\n  // Redux dispatch\n  const dispatch = useDispatch();\n\n  // Callbacks\n  const updateWindowSize = useCallback(() =>\n      {\n        dispatch(changeWindowSize(window.innerWidth, window.innerHeight))\n      },\n      [dispatch]);\n\n  // Resize listeners\n  const addResizeListeners = () =>\n  {\n    window.addEventListener(\"resize\", updateWindowSize);\n    window.addEventListener(\"orientationchange\", updateWindowSize, false);\n  };\n\n  const removeResizeListeners = () =>\n  {\n    window.removeEventListener(\"resize\", updateWindowSize, false);\n    window.removeEventListener(\"orientationchange\", updateWindowSize, false);\n  };\n\n  // Effects\n  useEffect(() =>\n  {\n    updateWindowSize();\n    addResizeListeners();\n\n    return removeResizeListeners;\n  });\n\n  return children;\n};\n\nexport default ResizeManager;","import {createAction} from 'redux-actions';\nimport {CHANGE_WINDOW_SIZE} from 'actions/screen/screenActionsTypes';\nimport {HEIGHT, WIDTH} from \"./screenConstants\";\n\nexport const changeWindowSize = (width, height) =>\n    createAction(CHANGE_WINDOW_SIZE)({\n      [WIDTH]: width,\n      [HEIGHT]: height,\n    });\n","export const WIDTH = 'width';\nexport const HEIGHT = 'height';\n","import React from \"react\";\nimport {IntlProvider} from \"react-intl-redux\";\nimport {INTL} from \"reducers/rootReducer\";\nimport {isImmutable} from \"immutable\";\n\nconst IntlManager = React.memo(({children}) =>\n    <IntlProvider intlSelector={state => isImmutable(state.get(INTL)) ? state.get(INTL).toJS() : state.get(INTL)}>\n      {children}\n    </IntlProvider>);\n\nexport default IntlManager;","import React from 'react';\nimport {Provider as ReduxProvider} from 'react-redux';\nimport store from 'store/configureStore';\nimport {HashRouter as Router} from 'react-router-dom';\nimport Routing from 'routing/routing'\nimport ResizeManager from 'managers/ResizeManager';\nimport Internationalization from 'intl/IntlManager';\n\nconst App = React.memo(() =>\n    <ReduxProvider store={store}>\n      <Internationalization>\n        <ResizeManager>\n          <Router>\n            <Routing/>\n          </Router>\n        </ResizeManager>\n      </Internationalization>\n    </ReduxProvider>);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'index.css'\nimport App from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'));"],"sourceRoot":""}